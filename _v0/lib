
# TODO: latest

###
  # @description: set up folder info variables
###
## Set up git help func
 ___x_cmd_theme_git_get_friendly_ref() {
   ___x_cmd_theme_git_get_branch || ___x_cmd_theme_git_get_tag || ___x_cmd_theme_git_get_short_sha
}

___x_cmd_theme_git_get_branch() {
    git symbolic-ref -q --short HEAD 2> /dev/null || return 1
}

___x_cmd_theme_git_get_tag() {
    git describe --tags --exact-match 2> /dev/null || return 1
}

___x_cmd_theme_git_get_short_sha() {
    git rev-parse --short HEAD 2> /dev/null
}

## Set up common folder info variables
___x_cmd_theme_git_get_prompt_info_exe() {
	local VALUE_NONE='NONE'
	if [[ -n "$___X_CMD_THEME_NO_CHECK_EXE" && "$___X_CMD_THEME_NO_CHECK_EXE" == true ]]; then
		printf $VALUE_NONE
	fi
	local GIT_EXE P4_EXE HG_EXE SVN_EXE
	local VLAUE_GIT='git' VLAUE_P4='p4' VLAUE_HG='hg' VLAUE_SVN='svn'
	GIT_EXE=$(which git 2>/dev/null || true)
	HG_EXE=$(which hg 2>/dev/null || true)
	P4_EXE=$(which p4 2>/dev/null || true)
	SVN_EXE=$(which svn 2>/dev/null || true)
	if [[ -f .git/HEAD ]] && [[ -x "$GIT_EXE" ]]; then
		printf $VLAUE_GIT
	elif [[ -x "$GIT_EXE" ]] && [[ -n "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]]; then
		printf $VLAUE_GIT
	elif [[ -x "$P4_EXE" ]] && [[ -n "$(p4 set P4CLIENT 2>/dev/null)" ]]; then
		printf $VLAUE_P4
	elif [[ -d .hg ]] && [[ -x "$HG_EXE" ]]; then
		printf $VLAUE_HG
	elif [[ -x "$HG_EXE" ]] && [[ -n "$(hg root 2>/dev/null)" ]]; then
		printf $VLAUE_HG
	elif [[ -d .svn ]] && [[ -x "$SVN_EXE" ]]; then
		printf $VLAUE_SVN
	elif [[ -x "$SVN_EXE" ]] && [[ -n "$(svn info --show-item wc-root 2>/dev/null)" ]]; then
		printf $VLAUE_SVN
	else
		printf $VALUE_NONE
	fi
}

___x_cmd_theme_git_get_prompt_info_value() {
	local ___PROMPT_INFO_EXE="$(___x_cmd_theme_git_get_prompt_info_exe)"
	local VLAUE_GIT='git' VLAUE_P4='p4' VLAUE_HG='hg' VLAUE_SVN='svn'
	if [[ $___PROMPT_INFO_EXE == $VLAUE_GIT ]]; then
    printf "$(___x_cmd_theme_git_get_friendly_ref)"
		return
	fi
	printf ""
	# TODO: consider adding minimal status information for hg and svn
	{ [[ $___PROMPT_INFO_EXE == $VLAUE_P4 ]] && p4_prompt_info && return; } || true
	{ [[ $___PROMPT_INFO_EXE == $VLAUE_HG ]] && hg_prompt_info && return; } || true
	{ [[ $___PROMPT_INFO_EXE == $VLAUE_SVN ]] && svn_prompt_info && return; } || true
}

# shellcheck disable=SC2034
______x_cmd_theme_prompt_format_wrapper(){
    ___X_CMD_THEME_USER="$1"
    # Path
    ___X_CMD_THEME_PATH="$2"
    ___X_CMD_THEME_FULL_PATH="$3"

    # Date
    ___X_CMD_THEME_DATE="$4"
    ___X_CMD_THEME_TIME_24_H_M_S="$5"
    ___X_CMD_THEME_TIME_12_H_M_S="$6"
    ___X_CMD_THEME_TIME_24_H_M="$7"
    ___X_CMD_THEME_TIME_12_H_M="$8"

    # Host
    ___X_CMD_THEME_HOST="$9"
    ___X_CMD_THEME_FULL_HOST="${10}"

    ___x_cmd_theme_prompt_format
}

# load theme file
___x_cmd_theme_load_format() {
    if [ -z "${___X_CMD_THEME_NAME}" ]; then
        ___X_CMD_THEME_NAME='ice'
    fi

    . "${1:?Provide theme file}"
    # TODO: config which envrinonments to pass

    if [ -n "$ZSH_VERSION" ]; then
		setopt PROMPT_SUBST
        PROMPT="$(______x_cmd_theme_prompt_format_wrapper \u \W \w \d \t \T \A \@ \h \H)"
    else
	    PS1="\$(______x_cmd_theme_prompt_format_wrapper \"\u\" \"\W\" \"\w\" \"\d\" \"\t\" \"\T\" \"\A\" \"\@\" \"\h\" \"\H")"
	fi
}


