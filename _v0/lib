
# TODO: latest

###
  # @description: set up folder info variables
###
## Set up git help func
 ___X_CMD_THEME_GET_GIT_FRIENDLY_REF() {
   ___X_CMD_THEME_GET_GIT_BRANCH || ___X_CMD_THEME_GET_GIT_TAG || ___X_CMD_THEME_GET_SHORT_SHA
}

___X_CMD_THEME_GET_GIT_BRANCH() {
    git symbolic-ref -q --short HEAD 2> /dev/null || return 1
}

___X_CMD_THEME_GET_GIT_TAG() {
    git describe --tags --exact-match 2> /dev/null || return 1
}

___X_CMD_THEME_GET_SHORT_SHA() {
    git rev-parse --short HEAD 2> /dev/null
}

## Set up common folder info variables
___X_CMD_THEME_GET_PROMPT_INFO_EXE() {
	local VALUE_NONE='NONE'
	if [[ -n "$___X_CMD_THEME_NO_CHECK_EXE" && "$___X_CMD_THEME_NO_CHECK_EXE" == true ]]; then
		printf $VALUE_NONE
	fi
	local GIT_EXE P4_EXE HG_EXE SVN_EXE
	local VLAUE_GIT='git' VLAUE_P4='p4' VLAUE_HG='hg' VLAUE_SVN='svn'
	GIT_EXE=$(which git 2>/dev/null || true)
	HG_EXE=$(which hg 2>/dev/null || true)
	P4_EXE=$(which p4 2>/dev/null || true)
	SVN_EXE=$(which svn 2>/dev/null || true)
	if [[ -f .git/HEAD ]] && [[ -x "$GIT_EXE" ]]; then
		printf $VLAUE_GIT
	elif [[ -x "$GIT_EXE" ]] && [[ -n "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]]; then
		printf $VLAUE_GIT
	elif [[ -x "$P4_EXE" ]] && [[ -n "$(p4 set P4CLIENT 2>/dev/null)" ]]; then
		printf $VLAUE_P4
	elif [[ -d .hg ]] && [[ -x "$HG_EXE" ]]; then
		printf $VLAUE_HG
	elif [[ -x "$HG_EXE" ]] && [[ -n "$(hg root 2>/dev/null)" ]]; then
		printf $VLAUE_HG
	elif [[ -d .svn ]] && [[ -x "$SVN_EXE" ]]; then
		printf $VLAUE_SVN
	elif [[ -x "$SVN_EXE" ]] && [[ -n "$(svn info --show-item wc-root 2>/dev/null)" ]]; then
		printf $VLAUE_SVN
	else
		printf $VALUE_NONE
	fi
}

___X_CMD_THEME_GET_PROMPT_INFO_VALUE() {
	local ___PROMPT_INFO_EXE="$(___X_CMD_THEME_GET_PROMPT_INFO_EXE)"
	local VLAUE_GIT='git' VLAUE_P4='p4' VLAUE_HG='hg' VLAUE_SVN='svn'
	if [[ $___PROMPT_INFO_EXE == $VLAUE_GIT ]]; then
    printf "$(___X_CMD_THEME_GET_GIT_FRIENDLY_REF)"
		return
	fi
	printf ""
	# TODO: consider adding minimal status information for hg and svn
	{ [[ $___PROMPT_INFO_EXE == $VLAUE_P4 ]] && p4_prompt_info && return; } || true
	{ [[ $___PROMPT_INFO_EXE == $VLAUE_HG ]] && hg_prompt_info && return; } || true
	{ [[ $___PROMPT_INFO_EXE == $VLAUE_SVN ]] && svn_prompt_info && return; } || true
}

# prompt format
___X_CMD_THEME_FORMAT_PROMPT() {
	if [ -n "$ZSH_VERSION" ]; then
		 setopt PROMPT_SUBST
	fi
	PS1="$(___X_CMD_THEME_PROMPT_FORMAT)"
}

# load theme file
___X_CMD_THEME_LOAD_THEME() {
  if [ -z "${___X_CMD_THEME_NAME}" ]; then
    ___X_CMD_THEME_NAME='ice'
  fi

  . "${1:?Provide theme file}"
  ___X_CMD_THEME_FORMAT_PROMPT
}


